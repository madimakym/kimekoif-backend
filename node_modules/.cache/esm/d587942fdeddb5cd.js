let User,Service,Disponibilite;_ded‍.x([["findByCity",()=>findByCity],["findByAvailable",()=>findByAvailable],["findByService",()=>findByService]]);_ded‍.w("../models/user-model",[["default",["User"],function(v){User=v}]]);_ded‍.w("../models/service-model",[["default",["Service"],function(v){Service=v}]]);_ded‍.w("../models/disponibilite-model",[["default",["Disponibilite"],function(v){Disponibilite=v}]]);




       const findByCity = async (req, res) => {
    try {
        const user = await User.find({
            $and: [{
                ville: {
                    $regex: new RegExp(req.body.city, "i")
                },
                profile: {
                    $regex: new RegExp("professional", "i")
                }
            }],
        });
        return res.json(user);
    } catch (error) {
        return res.status(500).json({
            status: 500,
            message: "Aucun resultat"
        });
    }
};

       const findByAvailable = async (req, res) => {
    try {
        const user = await Disponibilite.find({
            $or: [{
                start: req.body.start
            }]
        });
        return res.json(user);
    } catch (error) {
        return res.status(500).json({
            status: 500,
            message: "Aucun resultat"
        });
    }
};

       const findByService = async (req, res) => {
    try {
        const service = await Service.find({
            $or: [{
                libelle: req.body.libelle
            }]
        }).sort({ createdAt: "desc" }).populate([{
            path: "user",
            populate: {
                path: "user",
                model: "User",
            },
        }]);
        var items = [];
        service.forEach((child) => {
            items.push({
                id: child.user['_id'],
                libelle: child.libelle,
                price: child.price,
                firstname: child.user['firstname'],
                lastname: child.user['lastname'],
                city: child.user['ville'],
                avatar: child.user['avatar'],
                mobilite: child.user['mobilite'],
            });
        });
        return res.json({
            success: true,
            result: items
        });
    } catch (error) {
        return res.status(500).json({
            status: 500,
            message: "Aucun resultat"
        });
    }
};

