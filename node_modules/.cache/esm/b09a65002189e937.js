let Catalog;_218‍.x([["create",()=>create],["findByUser",()=>findByUser],["remove",()=>remove],["image",()=>image]]);_218‍.w("../models/catalog-model",[["default",["Catalog"],function(v){Catalog=v}]]);const upload = require("../middlewares/upload");

var multer = require("multer");


       const create = async (req, res) => {
    try {
        const path = './public/uploads/catalag/';
        upload(req, res, path, function (err) {
            const body = req.body
            _218‍.g.console.log("req.body:", req.body)
            _218‍.g.console.log("req.files:", req.files)
            // let catalog = new Catalog({
            //     user: body.user,
            //     service: body.service,
            //     image: req.files[0].filename,
            //     status: true
            // });

            // console.log("catalog:", catalog);
            catalog.save()
            if (err instanceof multer.MulterError) {
                return res.status(500).json(err);
            } else if (err) {
                return res.status(500).json(err);
            }
            return res.status(200).json({
                success: true,
                message: "Catalogue ajouté",
            })
        });
    } catch (error) {
        _218‍.g.console.log("error ===>", error);

    }
};

// export const create = async (req, res) => {
//     try {
//         let fields = req.fields;
//         let files = req.files;
//         let catalog = new Catalog({
//             user: fields.user,
//             service: fields.service,
//             status: true
//         });

//         if (files.image) {
//             catalog.image.data = fs.readFileSync(files.image.path);
//             catalog.image.contentType = files.image.type;
//         }

// await catalog.save()
// return res.status(200).json({
//     success: true,
//     message: "Catalogue ajouté",
// })
//     } catch (err) {
//         return res.status(500).json({
//             success: false,
//             message: err.message,
//         });
//     }
// };

       const findByUser = async (req, res) => {
    try {
        const body = req.body
        const catalog = await Catalog.find({
            $or: [{ user: body.user }],
        }, '_id').sort({ createdAt: "desc" });

        return res.json(catalog);

    } catch (error) {
        return res.status(500).json({
            status: 500,
            message: "Aucun resultat"
        });
    }
};

       const remove = async (req, res) => {
    const { id } = req.body
    try {
        await Catalog.findByIdAndRemove(id);
        return res.status(200).json({
            status: 200,
            message: "Catalogue supprimé",
        });
    } catch (error) {
        return res.status(500).json({
            status: 500,
            message: error.message,
        });
    }
};


       const image = async (req, res) => {
    let catalog = await Catalog.findById(req.params.catalogId).exec();
    if (catalog && catalog.image && catalog.image.data !== null) {
        res.set('Content-Type', catalog.image.contentType);
        _218‍.g.console.log("catalog.image.data: ===>", catalog.image.data)
        return res.send(catalog.image.data);
    }
}